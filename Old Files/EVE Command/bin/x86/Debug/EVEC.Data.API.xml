<?xml version="1.0"?>
<doc>
<assembly>
<name>
EVEC.Data.API
</name>
</assembly>
<members>
<member name="M:EVEC.Data.API.Account.GetCharacters">
	<summary>
 Gets the characters for the userID and saves them to database
 </summary>
	<returns>True is given if successful otherwise an apiError is returned</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.Character.GetCharacterSheet">
	<summary>
 Gets the character sheet for a character
 </summary>
	<returns>True is given if successful otherwise an apiError is returned</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiError.#ctor(EVEC.Data.API.UserErrors)">
	<summary>
 Create a new error type object
 </summary>
	<param name="customError">The enumation to represent a custom Api Error</param>
</member><member name="M:EVEC.Data.API.ApiError.#ctor(System.Int32,System.String)">
	<summary>
 Create a new error type object
 </summary>
	<param name="errorCode">The code of the error</param>
	<param name="errorText">The error text</param>
</member><member name="M:EVEC.Data.API.ApiError.#ctor(System.Int32,System.Int32,System.String)">
	<summary>
 Create a new error type object
 </summary>
	<param name="errorCategory">The error category</param>
	<param name="errorNumber">The error number</param>
	<param name="errorText">The error text</param>
</member><member name="P:EVEC.Data.API.ApiError.Category">
	<summary>
 The category of the error
 </summary>
</member><member name="P:EVEC.Data.API.ApiError.FullCode">
	<summary>
 The full error code
 </summary>
</member><member name="P:EVEC.Data.API.ApiError.Number">
	<summary>
 The number of the error
 </summary>
</member><member name="P:EVEC.Data.API.ApiError.Text">
	<summary>
 The error text
 </summary>
</member><member name="M:EVEC.Data.API.ApiError.CheckForError(System.Xml.Linq.XDocument)">
	<summary>
 Checks to see if the api document has an error in it
 </summary>
	<param name="apiDocument">The API xml document to check</param>
	<returns>Returns false if there is no error and an ApiError instance if there is an error</returns>
	<remarks></remarks>
</member><member name="T:EVEC.Data.API.ApiError">
	<summary>
 Represent an instance of an API error
 </summary>
	<remarks></remarks>
</member><member name="F:EVEC.Data.API.UserErrors.BaseCategory">
	<summary>
 The category for a user error
 </summary>
	<remarks></remarks>
</member><member name="F:EVEC.Data.API.UserErrors.UnableToLoad">
	<summary>
 The API was unable to be loaded
 </summary>
	<remarks></remarks>
</member><member name="F:EVEC.Data.API.UserErrors.UnableToSave">
	<summary>
 The API was unable to be saved to the database
 </summary>
	<remarks></remarks>
</member><member name="F:EVEC.Data.API.UserErrors.UpdateTooEarly">
	<summary>
 The cachedUntil time has not passed
 </summary>
	<remarks></remarks>
</member><member name="F:EVEC.Data.API.UserErrors.UserNotInserted">
	<summary>
 User not added to database
 </summary>
	<remarks></remarks>
</member><member name="F:EVEC.Data.API.UserErrors.UserNotSaved">
	<summary>
 User not updated
 </summary>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.EVE.GetSkillTree">
	<summary>
 Gets the entire skill tree for eve
 </summary>
	<returns>True is given if successful otherwise an apiError is returned</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.CheckCachedUntilTime(System.String,System.String)">
	<summary>
 Checks to see if a new call can be made to the api by checking the cachedUntil time in the database
 </summary>
	<param name="database">The database to get the data from</param>
	<param name="tableName">The table the api info is stored in</param>
	<returns>Returns true if an update can be obtained and false if it cannot</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.CheckCachedUntilTime(System.String,System.String,System.String,System.String)">
	<summary>
 Checks to see if a new call can be made to the api by checking the cachedUntil time in the database
 </summary>
	<param name="database">The database to get the data from</param>
	<param name="tableName">The table the api info is stored in</param>
	<param name="conditionField">The condition field to look in</param>
	<param name="conditionValue">The condition value to look for</param>
	<returns>Returns true if an update can be obtained and false if it cannot</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.AccountRowsetToDatabase(EVEC.Data.Database.Connection,System.Data.SqlServerCe.SqlCeTransaction,System.Xml.Linq.XElement,System.Boolean,System.String)">
	<summary>
 Inserts rowset into the database with relation to a user
 </summary>
	<param name="connection"></param>
	<param name="transaction"></param>
	<param name="rowset"></param>
	<param name="cachedUntil"></param>
	<param name="tablePrefix"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.AccountRowsetToDatabase(EVEC.Data.Database.Connection,System.Data.SqlServerCe.SqlCeTransaction,System.Xml.Linq.XElement,System.Collections.Generic.List{EVEC.Data.Database.Parameter},System.Boolean,System.String)">
	<summary>
 Inserts rowset into the database with relation to a user
 </summary>
	<param name="connection"></param>
	<param name="transaction"></param>
	<param name="rowset"></param>
	<param name="customValues"></param>
	<param name="cachedUntil"></param>
	<param name="tablePrefix"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.CharacterRowsetToDatabase(EVEC.Data.Database.Connection,System.Data.SqlServerCe.SqlCeTransaction,System.Xml.Linq.XElement,System.Boolean,System.String)">
	<summary>
 Inserts rowset into the database with relation to a character
 </summary>
	<param name="connection"></param>
	<param name="transaction"></param>
	<param name="rowset"></param>
	<param name="cachedUntil"></param>
	<param name="tablePrefix"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.CharacterRowsetToDatabase(EVEC.Data.Database.Connection,System.Data.SqlServerCe.SqlCeTransaction,System.Xml.Linq.XElement,System.Collections.Generic.List{EVEC.Data.Database.Parameter},System.Boolean,System.String)">
	<summary>
 Inserts rowset into the database with relation to a character
 </summary>
	<param name="connection"></param>
	<param name="transaction"></param>
	<param name="rowset"></param>
	<param name="customValues"></param>
	<param name="cachedUntil"></param>
	<param name="tablePrefix"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.NoApiInfoRowsetToDatabase(EVEC.Data.Database.Connection,System.Data.SqlServerCe.SqlCeTransaction,System.Xml.Linq.XElement,System.Boolean,System.String)">
	<summary>
 Inserts rowset into the database that has been obtained without api information
 </summary>
	<param name="connection"></param>
	<param name="transaction"></param>
	<param name="rowset"></param>
	<param name="cachedUntil"></param>
	<param name="tablePrefix"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.NoApiInfoRowsetToDatabase(EVEC.Data.Database.Connection,System.Data.SqlServerCe.SqlCeTransaction,System.Xml.Linq.XElement,System.Collections.Generic.List{EVEC.Data.Database.Parameter},System.Boolean,System.String)">
	<summary>
 Inserts rowset into the database that has been obtained without api information
 </summary>
	<param name="connection"></param>
	<param name="transaction"></param>
	<param name="rowset"></param>
	<param name="customValues"></param>
	<param name="cachedUntil"></param>
	<param name="tablePrefix"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.SkillTypeIDRowsetToDatabase(EVEC.Data.Database.Connection,System.Data.SqlServerCe.SqlCeTransaction,System.Xml.Linq.XElement,System.Boolean,System.String)">
	<summary>
 Inserts rowset into the database with relation to a skill
 </summary>
	<param name="connection"></param>
	<param name="transaction"></param>
	<param name="rowset"></param>
	<param name="cachedUntil"></param>
	<param name="tablePrefix"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.SkillTypeIDRowsetToDatabase(EVEC.Data.Database.Connection,System.Data.SqlServerCe.SqlCeTransaction,System.Xml.Linq.XElement,System.Collections.Generic.List{EVEC.Data.Database.Parameter},System.Boolean,System.String)">
	<summary>
 Inserts rowset into the database with relation to a skill
 </summary>
	<param name="connection"></param>
	<param name="transaction"></param>
	<param name="rowset"></param>
	<param name="customValues"></param>
	<param name="cachedUntil"></param>
	<param name="tablePrefix"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.GetApi(System.String,System.String,System.String)">
	<summary>
 Gets the API from the server 
 </summary>
	<param name="apiName">The name of the api retrieved from the api server</param>
	<param name="apiLocation">The URI of the api</param>
	<param name="database">The database to send the API to</param>
	<returns>The XDocument if successful or an ApiError if unsuccessful</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.GetApiIgnoreCache(System.String,System.String)">
	<summary>
 Gets the API from the server but ignores the cache timer
 </summary>
	<param name="apiName">The name of the api retrieved from the api server</param>
	<param name="apiLocation">The URI of the api</param>
	<returns>The XDocument if successful or an ApiError if unsuccessful</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.GetApi(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Gets the API from the server 
 </summary>
	<param name="apiName">The name of the api retrieved from the api server</param>
	<param name="apiLocation">The URI of the api</param>
	<param name="database">The database to send the API to</param>
	<param name="userID">The user ID required for the API</param>
	<param name="apiKey">The API key required to the get the API</param>
	<returns>The XDocument if successful or an ApiError if unsuccessful</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.GetApiIgnoreCache(System.String,System.String,System.String,System.String)">
	<summary>
 Gets the API from the server but ignores the cache timer
 </summary>
	<param name="apiName">The name of the api retrieved from the api server</param>
	<param name="apiLocation">The URI of the api</param>
	<param name="userID">The user ID required for the API</param>
	<param name="apiKey">The API key required to the get the API</param>
	<returns>The XDocument if successful or an ApiError if unsuccessful</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.GetApi(System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Gets the API from the server 
 </summary>
	<param name="apiName">The name of the api retrieved from the api server</param>
	<param name="apiLocation">The URI of the api</param>
	<param name="database">The database to send the API to</param>
	<param name="userID">The user ID required for the API</param>
	<param name="apiKey">The API key required to the get the API</param>
	<param name="characterID">The character ID required for the API</param>
	<returns>The XDocument if successful or an ApiError if unsuccessful</returns>
	<remarks></remarks>
</member><member name="M:EVEC.Data.API.ApiBase.GetApiIgnoreCache(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Gets the API from the server but ignores the cache timer
 </summary>
	<param name="apiName">The name of the api retrieved from the api server</param>
	<param name="apiLocation">The URI of the api</param>
	<param name="userID">The user ID required for the API</param>
	<param name="apiKey">The API key required to the get the API</param>
	<param name="characterID">The character ID required for the API</param>
	<returns>The XDocument if successful or an ApiError if unsuccessful</returns>
	<remarks></remarks>
</member>
</members>
</doc>