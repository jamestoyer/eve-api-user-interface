'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3074
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace Database
	
	Partial Public Class Userdata
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertCharacters(instance As Characters)
    End Sub
    Partial Private Sub UpdateCharacters(instance As Characters)
    End Sub
    Partial Private Sub DeleteCharacters(instance As Characters)
    End Sub
    Partial Private Sub InsertCharacterSheet(instance As CharacterSheet)
    End Sub
    Partial Private Sub UpdateCharacterSheet(instance As CharacterSheet)
    End Sub
    Partial Private Sub DeleteCharacterSheet(instance As CharacterSheet)
    End Sub
    Partial Private Sub InsertCsCertificates(instance As CsCertificates)
    End Sub
    Partial Private Sub UpdateCsCertificates(instance As CsCertificates)
    End Sub
    Partial Private Sub DeleteCsCertificates(instance As CsCertificates)
    End Sub
    Partial Private Sub InsertCsCorpRoles(instance As CsCorpRoles)
    End Sub
    Partial Private Sub UpdateCsCorpRoles(instance As CsCorpRoles)
    End Sub
    Partial Private Sub DeleteCsCorpRoles(instance As CsCorpRoles)
    End Sub
    Partial Private Sub InsertCsCorpRolesAtBase(instance As CsCorpRolesAtBase)
    End Sub
    Partial Private Sub UpdateCsCorpRolesAtBase(instance As CsCorpRolesAtBase)
    End Sub
    Partial Private Sub DeleteCsCorpRolesAtBase(instance As CsCorpRolesAtBase)
    End Sub
    Partial Private Sub InsertCsCorpRolesAtHQ(instance As CsCorpRolesAtHQ)
    End Sub
    Partial Private Sub UpdateCsCorpRolesAtHQ(instance As CsCorpRolesAtHQ)
    End Sub
    Partial Private Sub DeleteCsCorpRolesAtHQ(instance As CsCorpRolesAtHQ)
    End Sub
    Partial Private Sub InsertCsCorpRolesAtOther(instance As CsCorpRolesAtOther)
    End Sub
    Partial Private Sub UpdateCsCorpRolesAtOther(instance As CsCorpRolesAtOther)
    End Sub
    Partial Private Sub DeleteCsCorpRolesAtOther(instance As CsCorpRolesAtOther)
    End Sub
    Partial Private Sub InsertCsCorpTitles(instance As CsCorpTitles)
    End Sub
    Partial Private Sub UpdateCsCorpTitles(instance As CsCorpTitles)
    End Sub
    Partial Private Sub DeleteCsCorpTitles(instance As CsCorpTitles)
    End Sub
    Partial Private Sub InsertCsSkills(instance As CsSkills)
    End Sub
    Partial Private Sub UpdateCsSkills(instance As CsSkills)
    End Sub
    Partial Private Sub DeleteCsSkills(instance As CsSkills)
    End Sub
    Partial Private Sub InsertUserInfo(instance As UserInfo)
    End Sub
    Partial Private Sub UpdateUserInfo(instance As UserInfo)
    End Sub
    Partial Private Sub DeleteUserInfo(instance As UserInfo)
    End Sub
    #End Region
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Characters() As System.Data.Linq.Table(Of Characters)
			Get
				Return Me.GetTable(Of Characters)
			End Get
		End Property
		
		Public ReadOnly Property CharacterSheet() As System.Data.Linq.Table(Of CharacterSheet)
			Get
				Return Me.GetTable(Of CharacterSheet)
			End Get
		End Property
		
		Public ReadOnly Property CsCertificates() As System.Data.Linq.Table(Of CsCertificates)
			Get
				Return Me.GetTable(Of CsCertificates)
			End Get
		End Property
		
		Public ReadOnly Property CsCorpRoles() As System.Data.Linq.Table(Of CsCorpRoles)
			Get
				Return Me.GetTable(Of CsCorpRoles)
			End Get
		End Property
		
		Public ReadOnly Property CsCorpRolesAtBase() As System.Data.Linq.Table(Of CsCorpRolesAtBase)
			Get
				Return Me.GetTable(Of CsCorpRolesAtBase)
			End Get
		End Property
		
		Public ReadOnly Property CsCorpRolesAtHQ() As System.Data.Linq.Table(Of CsCorpRolesAtHQ)
			Get
				Return Me.GetTable(Of CsCorpRolesAtHQ)
			End Get
		End Property
		
		Public ReadOnly Property CsCorpRolesAtOther() As System.Data.Linq.Table(Of CsCorpRolesAtOther)
			Get
				Return Me.GetTable(Of CsCorpRolesAtOther)
			End Get
		End Property
		
		Public ReadOnly Property CsCorpTitles() As System.Data.Linq.Table(Of CsCorpTitles)
			Get
				Return Me.GetTable(Of CsCorpTitles)
			End Get
		End Property
		
		Public ReadOnly Property CsSkills() As System.Data.Linq.Table(Of CsSkills)
			Get
				Return Me.GetTable(Of CsSkills)
			End Get
		End Property
		
		Public ReadOnly Property UserInfo() As System.Data.Linq.Table(Of UserInfo)
			Get
				Return Me.GetTable(Of UserInfo)
			End Get
		End Property
	End Class
	
	<Table()>  _
	Partial Public Class Characters
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _Name As String
		
		Private _CharacterID As String
		
		Private _CorporationName As String
		
		Private _CorporationID As String
		
		Private _CachedUntil As Date
		
		Private _UserID As String
		
		Private _Active As Boolean
		
		Private _CharacterSheet As EntityRef(Of CharacterSheet)
		
		Private _UserInfo As EntityRef(Of UserInfo)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnCharacterIDChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterIDChanged()
    End Sub
    Partial Private Sub OnCorporationNameChanging(value As String)
    End Sub
    Partial Private Sub OnCorporationNameChanged()
    End Sub
    Partial Private Sub OnCorporationIDChanging(value As String)
    End Sub
    Partial Private Sub OnCorporationIDChanged()
    End Sub
    Partial Private Sub OnCachedUntilChanging(value As Date)
    End Sub
    Partial Private Sub OnCachedUntilChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnActiveChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CharacterSheet = CType(Nothing, EntityRef(Of CharacterSheet))
			Me._UserInfo = CType(Nothing, EntityRef(Of UserInfo))
			OnCreated
		End Sub
		
		<Column(Name:="name", Storage:="_Name", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="characterID", Storage:="_CharacterID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CharacterID() As String
			Get
				Return Me._CharacterID
			End Get
			Set
				If (String.Equals(Me._CharacterID, value) = false) Then
					Me.OnCharacterIDChanging(value)
					Me.SendPropertyChanging
					Me._CharacterID = value
					Me.SendPropertyChanged("CharacterID")
					Me.OnCharacterIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="corporationName", Storage:="_CorporationName", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
		Public Property CorporationName() As String
			Get
				Return Me._CorporationName
			End Get
			Set
				If (String.Equals(Me._CorporationName, value) = false) Then
					Me.OnCorporationNameChanging(value)
					Me.SendPropertyChanging
					Me._CorporationName = value
					Me.SendPropertyChanged("CorporationName")
					Me.OnCorporationNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="corporationID", Storage:="_CorporationID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CorporationID() As String
			Get
				Return Me._CorporationID
			End Get
			Set
				If (String.Equals(Me._CorporationID, value) = false) Then
					Me.OnCorporationIDChanging(value)
					Me.SendPropertyChanging
					Me._CorporationID = value
					Me.SendPropertyChanged("CorporationID")
					Me.OnCorporationIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="cachedUntil", Storage:="_CachedUntil", DbType:="DateTime NOT NULL")>  _
		Public Property CachedUntil() As Date
			Get
				Return Me._CachedUntil
			End Get
			Set
				If ((Me._CachedUntil = value)  _
							= false) Then
					Me.OnCachedUntilChanging(value)
					Me.SendPropertyChanging
					Me._CachedUntil = value
					Me.SendPropertyChanged("CachedUntil")
					Me.OnCachedUntilChanged
				End If
			End Set
		End Property
		
		<Column(Name:="userID", Storage:="_UserID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property UserID() As String
			Get
				Return Me._UserID
			End Get
			Set
				If (String.Equals(Me._UserID, value) = false) Then
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="active", Storage:="_Active", DbType:="Bit NOT NULL")>  _
		Public Property Active() As Boolean
			Get
				Return Me._Active
			End Get
			Set
				If ((Me._Active = value)  _
							= false) Then
					Me.OnActiveChanging(value)
					Me.SendPropertyChanging
					Me._Active = value
					Me.SendPropertyChanged("Active")
					Me.OnActiveChanged
				End If
			End Set
		End Property
		
		<Association(Name:="Characters_CharacterSheet", Storage:="_CharacterSheet", ThisKey:="CharacterID", OtherKey:="CharacterID", IsUnique:=true, IsForeignKey:=false)>  _
		Public Property CharacterSheet() As CharacterSheet
			Get
				Return Me._CharacterSheet.Entity
			End Get
			Set
				Dim previousValue As CharacterSheet = Me._CharacterSheet.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CharacterSheet.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CharacterSheet.Entity = Nothing
						previousValue.Characters = Nothing
					End If
					Me._CharacterSheet.Entity = value
					If (Object.Equals(value, Nothing) = false) Then
						value.Characters = Me
					End If
					Me.SendPropertyChanged("CharacterSheet")
				End If
			End Set
		End Property
		
		<Association(Name:="UserInfo_Characters", Storage:="_UserInfo", ThisKey:="UserID", OtherKey:="UserID", IsForeignKey:=true, DeleteOnNull:=true)>  _
		Public Property UserInfo() As UserInfo
			Get
				Return Me._UserInfo.Entity
			End Get
			Set
				Dim previousValue As UserInfo = Me._UserInfo.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._UserInfo.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._UserInfo.Entity = Nothing
						previousValue.Characters.Remove(Me)
					End If
					Me._UserInfo.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Characters.Add(Me)
						Me._UserID = value.UserID
					Else
						Me._UserID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("UserInfo")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table()>  _
	Partial Public Class CharacterSheet
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _CharacterID As String
		
		Private _Name As String
		
		Private _Race As String
		
		Private _BloodLine As String
		
		Private _Gender As String
		
		Private _CorporationName As String
		
		Private _CorporationID As String
		
		Private _CloneName As String
		
		Private _CloneSkillPoints As String
		
		Private _Balance As String
		
		Private _Intelligence As Short
		
		Private _Memory As Short
		
		Private _Charisma As Short
		
		Private _Perception As Short
		
		Private _Willpower As Short
		
		Private _CachedUntil As Date
		
		Private _MaName As String
		
		Private _MaValue As System.Nullable(Of Short)
		
		Private _IaName As String
		
		Private _IaValue As System.Nullable(Of Short)
		
		Private _PaName As String
		
		Private _PaValue As System.Nullable(Of Short)
		
		Private _CaName As String
		
		Private _CaValue As System.Nullable(Of Short)
		
		Private _WaName As String
		
		Private _WaValue As System.Nullable(Of Short)
		
		Private _CsCertificates As EntitySet(Of CsCertificates)
		
		Private _CsCorpRoles As EntitySet(Of CsCorpRoles)
		
		Private _CsCorpRolesAtBase As EntitySet(Of CsCorpRolesAtBase)
		
		Private _CsCorpRolesAtHQ As EntitySet(Of CsCorpRolesAtHQ)
		
		Private _CsCorpRolesAtOther As EntitySet(Of CsCorpRolesAtOther)
		
		Private _CsCorpTitles As EntitySet(Of CsCorpTitles)
		
		Private _CsSkills As EntitySet(Of CsSkills)
		
		Private _Characters As EntityRef(Of Characters)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCharacterIDChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnRaceChanging(value As String)
    End Sub
    Partial Private Sub OnRaceChanged()
    End Sub
    Partial Private Sub OnBloodLineChanging(value As String)
    End Sub
    Partial Private Sub OnBloodLineChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnCorporationNameChanging(value As String)
    End Sub
    Partial Private Sub OnCorporationNameChanged()
    End Sub
    Partial Private Sub OnCorporationIDChanging(value As String)
    End Sub
    Partial Private Sub OnCorporationIDChanged()
    End Sub
    Partial Private Sub OnCloneNameChanging(value As String)
    End Sub
    Partial Private Sub OnCloneNameChanged()
    End Sub
    Partial Private Sub OnCloneSkillPointsChanging(value As String)
    End Sub
    Partial Private Sub OnCloneSkillPointsChanged()
    End Sub
    Partial Private Sub OnBalanceChanging(value As String)
    End Sub
    Partial Private Sub OnBalanceChanged()
    End Sub
    Partial Private Sub OnIntelligenceChanging(value As Short)
    End Sub
    Partial Private Sub OnIntelligenceChanged()
    End Sub
    Partial Private Sub OnMemoryChanging(value As Short)
    End Sub
    Partial Private Sub OnMemoryChanged()
    End Sub
    Partial Private Sub OnCharismaChanging(value As Short)
    End Sub
    Partial Private Sub OnCharismaChanged()
    End Sub
    Partial Private Sub OnPerceptionChanging(value As Short)
    End Sub
    Partial Private Sub OnPerceptionChanged()
    End Sub
    Partial Private Sub OnWillpowerChanging(value As Short)
    End Sub
    Partial Private Sub OnWillpowerChanged()
    End Sub
    Partial Private Sub OnCachedUntilChanging(value As Date)
    End Sub
    Partial Private Sub OnCachedUntilChanged()
    End Sub
    Partial Private Sub OnMaNameChanging(value As String)
    End Sub
    Partial Private Sub OnMaNameChanged()
    End Sub
    Partial Private Sub OnMaValueChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMaValueChanged()
    End Sub
    Partial Private Sub OnIaNameChanging(value As String)
    End Sub
    Partial Private Sub OnIaNameChanged()
    End Sub
    Partial Private Sub OnIaValueChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnIaValueChanged()
    End Sub
    Partial Private Sub OnPaNameChanging(value As String)
    End Sub
    Partial Private Sub OnPaNameChanged()
    End Sub
    Partial Private Sub OnPaValueChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnPaValueChanged()
    End Sub
    Partial Private Sub OnCaNameChanging(value As String)
    End Sub
    Partial Private Sub OnCaNameChanged()
    End Sub
    Partial Private Sub OnCaValueChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnCaValueChanged()
    End Sub
    Partial Private Sub OnWaNameChanging(value As String)
    End Sub
    Partial Private Sub OnWaNameChanged()
    End Sub
    Partial Private Sub OnWaValueChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnWaValueChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CsCertificates = New EntitySet(Of CsCertificates)(AddressOf Me.attach_CsCertificates, AddressOf Me.detach_CsCertificates)
			Me._CsCorpRoles = New EntitySet(Of CsCorpRoles)(AddressOf Me.attach_CsCorpRoles, AddressOf Me.detach_CsCorpRoles)
			Me._CsCorpRolesAtBase = New EntitySet(Of CsCorpRolesAtBase)(AddressOf Me.attach_CsCorpRolesAtBase, AddressOf Me.detach_CsCorpRolesAtBase)
			Me._CsCorpRolesAtHQ = New EntitySet(Of CsCorpRolesAtHQ)(AddressOf Me.attach_CsCorpRolesAtHQ, AddressOf Me.detach_CsCorpRolesAtHQ)
			Me._CsCorpRolesAtOther = New EntitySet(Of CsCorpRolesAtOther)(AddressOf Me.attach_CsCorpRolesAtOther, AddressOf Me.detach_CsCorpRolesAtOther)
			Me._CsCorpTitles = New EntitySet(Of CsCorpTitles)(AddressOf Me.attach_CsCorpTitles, AddressOf Me.detach_CsCorpTitles)
			Me._CsSkills = New EntitySet(Of CsSkills)(AddressOf Me.attach_CsSkills, AddressOf Me.detach_CsSkills)
			Me._Characters = CType(Nothing, EntityRef(Of Characters))
			OnCreated
		End Sub
		
		<Column(Name:="characterID", Storage:="_CharacterID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property CharacterID() As String
			Get
				Return Me._CharacterID
			End Get
			Set
				If (String.Equals(Me._CharacterID, value) = false) Then
					Me.OnCharacterIDChanging(value)
					Me.SendPropertyChanging
					Me._CharacterID = value
					Me.SendPropertyChanged("CharacterID")
					Me.OnCharacterIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="name", Storage:="_Name", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="race", Storage:="_Race", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Race() As String
			Get
				Return Me._Race
			End Get
			Set
				If (String.Equals(Me._Race, value) = false) Then
					Me.OnRaceChanging(value)
					Me.SendPropertyChanging
					Me._Race = value
					Me.SendPropertyChanged("Race")
					Me.OnRaceChanged
				End If
			End Set
		End Property
		
		<Column(Name:="bloodLine", Storage:="_BloodLine", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property BloodLine() As String
			Get
				Return Me._BloodLine
			End Get
			Set
				If (String.Equals(Me._BloodLine, value) = false) Then
					Me.OnBloodLineChanging(value)
					Me.SendPropertyChanging
					Me._BloodLine = value
					Me.SendPropertyChanged("BloodLine")
					Me.OnBloodLineChanged
				End If
			End Set
		End Property
		
		<Column(Name:="gender", Storage:="_Gender", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
		Public Property Gender() As String
			Get
				Return Me._Gender
			End Get
			Set
				If (String.Equals(Me._Gender, value) = false) Then
					Me.OnGenderChanging(value)
					Me.SendPropertyChanging
					Me._Gender = value
					Me.SendPropertyChanged("Gender")
					Me.OnGenderChanged
				End If
			End Set
		End Property
		
		<Column(Name:="corporationName", Storage:="_CorporationName", DbType:="NVarChar(300) NOT NULL", CanBeNull:=false)>  _
		Public Property CorporationName() As String
			Get
				Return Me._CorporationName
			End Get
			Set
				If (String.Equals(Me._CorporationName, value) = false) Then
					Me.OnCorporationNameChanging(value)
					Me.SendPropertyChanging
					Me._CorporationName = value
					Me.SendPropertyChanged("CorporationName")
					Me.OnCorporationNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="corporationID", Storage:="_CorporationID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CorporationID() As String
			Get
				Return Me._CorporationID
			End Get
			Set
				If (String.Equals(Me._CorporationID, value) = false) Then
					Me.OnCorporationIDChanging(value)
					Me.SendPropertyChanging
					Me._CorporationID = value
					Me.SendPropertyChanged("CorporationID")
					Me.OnCorporationIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="cloneName", Storage:="_CloneName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property CloneName() As String
			Get
				Return Me._CloneName
			End Get
			Set
				If (String.Equals(Me._CloneName, value) = false) Then
					Me.OnCloneNameChanging(value)
					Me.SendPropertyChanging
					Me._CloneName = value
					Me.SendPropertyChanged("CloneName")
					Me.OnCloneNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="cloneSkillPoints", Storage:="_CloneSkillPoints", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CloneSkillPoints() As String
			Get
				Return Me._CloneSkillPoints
			End Get
			Set
				If (String.Equals(Me._CloneSkillPoints, value) = false) Then
					Me.OnCloneSkillPointsChanging(value)
					Me.SendPropertyChanging
					Me._CloneSkillPoints = value
					Me.SendPropertyChanged("CloneSkillPoints")
					Me.OnCloneSkillPointsChanged
				End If
			End Set
		End Property
		
		<Column(Name:="balance", Storage:="_Balance", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Balance() As String
			Get
				Return Me._Balance
			End Get
			Set
				If (String.Equals(Me._Balance, value) = false) Then
					Me.OnBalanceChanging(value)
					Me.SendPropertyChanging
					Me._Balance = value
					Me.SendPropertyChanged("Balance")
					Me.OnBalanceChanged
				End If
			End Set
		End Property
		
		<Column(Name:="intelligence", Storage:="_Intelligence", DbType:="SmallInt NOT NULL")>  _
		Public Property Intelligence() As Short
			Get
				Return Me._Intelligence
			End Get
			Set
				If ((Me._Intelligence = value)  _
							= false) Then
					Me.OnIntelligenceChanging(value)
					Me.SendPropertyChanging
					Me._Intelligence = value
					Me.SendPropertyChanged("Intelligence")
					Me.OnIntelligenceChanged
				End If
			End Set
		End Property
		
		<Column(Name:="memory", Storage:="_Memory", DbType:="SmallInt NOT NULL")>  _
		Public Property Memory() As Short
			Get
				Return Me._Memory
			End Get
			Set
				If ((Me._Memory = value)  _
							= false) Then
					Me.OnMemoryChanging(value)
					Me.SendPropertyChanging
					Me._Memory = value
					Me.SendPropertyChanged("Memory")
					Me.OnMemoryChanged
				End If
			End Set
		End Property
		
		<Column(Name:="charisma", Storage:="_Charisma", DbType:="SmallInt NOT NULL")>  _
		Public Property Charisma() As Short
			Get
				Return Me._Charisma
			End Get
			Set
				If ((Me._Charisma = value)  _
							= false) Then
					Me.OnCharismaChanging(value)
					Me.SendPropertyChanging
					Me._Charisma = value
					Me.SendPropertyChanged("Charisma")
					Me.OnCharismaChanged
				End If
			End Set
		End Property
		
		<Column(Name:="perception", Storage:="_Perception", DbType:="SmallInt NOT NULL")>  _
		Public Property Perception() As Short
			Get
				Return Me._Perception
			End Get
			Set
				If ((Me._Perception = value)  _
							= false) Then
					Me.OnPerceptionChanging(value)
					Me.SendPropertyChanging
					Me._Perception = value
					Me.SendPropertyChanged("Perception")
					Me.OnPerceptionChanged
				End If
			End Set
		End Property
		
		<Column(Name:="willpower", Storage:="_Willpower", DbType:="SmallInt NOT NULL")>  _
		Public Property Willpower() As Short
			Get
				Return Me._Willpower
			End Get
			Set
				If ((Me._Willpower = value)  _
							= false) Then
					Me.OnWillpowerChanging(value)
					Me.SendPropertyChanging
					Me._Willpower = value
					Me.SendPropertyChanged("Willpower")
					Me.OnWillpowerChanged
				End If
			End Set
		End Property
		
		<Column(Name:="cachedUntil", Storage:="_CachedUntil", DbType:="DateTime NOT NULL")>  _
		Public Property CachedUntil() As Date
			Get
				Return Me._CachedUntil
			End Get
			Set
				If ((Me._CachedUntil = value)  _
							= false) Then
					Me.OnCachedUntilChanging(value)
					Me.SendPropertyChanging
					Me._CachedUntil = value
					Me.SendPropertyChanged("CachedUntil")
					Me.OnCachedUntilChanged
				End If
			End Set
		End Property
		
		<Column(Name:="maName", Storage:="_MaName", DbType:="NVarChar(150)")>  _
		Public Property MaName() As String
			Get
				Return Me._MaName
			End Get
			Set
				If (String.Equals(Me._MaName, value) = false) Then
					Me.OnMaNameChanging(value)
					Me.SendPropertyChanging
					Me._MaName = value
					Me.SendPropertyChanged("MaName")
					Me.OnMaNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="maValue", Storage:="_MaValue", DbType:="SmallInt")>  _
		Public Property MaValue() As System.Nullable(Of Short)
			Get
				Return Me._MaValue
			End Get
			Set
				If (Me._MaValue.Equals(value) = false) Then
					Me.OnMaValueChanging(value)
					Me.SendPropertyChanging
					Me._MaValue = value
					Me.SendPropertyChanged("MaValue")
					Me.OnMaValueChanged
				End If
			End Set
		End Property
		
		<Column(Name:="iaName", Storage:="_IaName", DbType:="NVarChar(150)")>  _
		Public Property IaName() As String
			Get
				Return Me._IaName
			End Get
			Set
				If (String.Equals(Me._IaName, value) = false) Then
					Me.OnIaNameChanging(value)
					Me.SendPropertyChanging
					Me._IaName = value
					Me.SendPropertyChanged("IaName")
					Me.OnIaNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="iaValue", Storage:="_IaValue", DbType:="SmallInt")>  _
		Public Property IaValue() As System.Nullable(Of Short)
			Get
				Return Me._IaValue
			End Get
			Set
				If (Me._IaValue.Equals(value) = false) Then
					Me.OnIaValueChanging(value)
					Me.SendPropertyChanging
					Me._IaValue = value
					Me.SendPropertyChanged("IaValue")
					Me.OnIaValueChanged
				End If
			End Set
		End Property
		
		<Column(Name:="paName", Storage:="_PaName", DbType:="NVarChar(150)")>  _
		Public Property PaName() As String
			Get
				Return Me._PaName
			End Get
			Set
				If (String.Equals(Me._PaName, value) = false) Then
					Me.OnPaNameChanging(value)
					Me.SendPropertyChanging
					Me._PaName = value
					Me.SendPropertyChanged("PaName")
					Me.OnPaNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="paValue", Storage:="_PaValue", DbType:="SmallInt")>  _
		Public Property PaValue() As System.Nullable(Of Short)
			Get
				Return Me._PaValue
			End Get
			Set
				If (Me._PaValue.Equals(value) = false) Then
					Me.OnPaValueChanging(value)
					Me.SendPropertyChanging
					Me._PaValue = value
					Me.SendPropertyChanged("PaValue")
					Me.OnPaValueChanged
				End If
			End Set
		End Property
		
		<Column(Name:="caName", Storage:="_CaName", DbType:="NVarChar(150)")>  _
		Public Property CaName() As String
			Get
				Return Me._CaName
			End Get
			Set
				If (String.Equals(Me._CaName, value) = false) Then
					Me.OnCaNameChanging(value)
					Me.SendPropertyChanging
					Me._CaName = value
					Me.SendPropertyChanged("CaName")
					Me.OnCaNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="caValue", Storage:="_CaValue", DbType:="SmallInt")>  _
		Public Property CaValue() As System.Nullable(Of Short)
			Get
				Return Me._CaValue
			End Get
			Set
				If (Me._CaValue.Equals(value) = false) Then
					Me.OnCaValueChanging(value)
					Me.SendPropertyChanging
					Me._CaValue = value
					Me.SendPropertyChanged("CaValue")
					Me.OnCaValueChanged
				End If
			End Set
		End Property
		
		<Column(Name:="waName", Storage:="_WaName", DbType:="NVarChar(150)")>  _
		Public Property WaName() As String
			Get
				Return Me._WaName
			End Get
			Set
				If (String.Equals(Me._WaName, value) = false) Then
					Me.OnWaNameChanging(value)
					Me.SendPropertyChanging
					Me._WaName = value
					Me.SendPropertyChanged("WaName")
					Me.OnWaNameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="waValue", Storage:="_WaValue", DbType:="SmallInt")>  _
		Public Property WaValue() As System.Nullable(Of Short)
			Get
				Return Me._WaValue
			End Get
			Set
				If (Me._WaValue.Equals(value) = false) Then
					Me.OnWaValueChanging(value)
					Me.SendPropertyChanging
					Me._WaValue = value
					Me.SendPropertyChanged("WaValue")
					Me.OnWaValueChanged
				End If
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCertificates", Storage:="_CsCertificates", ThisKey:="CharacterID", OtherKey:="CharacterID")>  _
		Public Property CsCertificates() As EntitySet(Of CsCertificates)
			Get
				Return Me._CsCertificates
			End Get
			Set
				Me._CsCertificates.Assign(value)
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpRoles", Storage:="_CsCorpRoles", ThisKey:="CharacterID", OtherKey:="CharacterID")>  _
		Public Property CsCorpRoles() As EntitySet(Of CsCorpRoles)
			Get
				Return Me._CsCorpRoles
			End Get
			Set
				Me._CsCorpRoles.Assign(value)
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpRolesAtBase", Storage:="_CsCorpRolesAtBase", ThisKey:="CharacterID", OtherKey:="CharacterID")>  _
		Public Property CsCorpRolesAtBase() As EntitySet(Of CsCorpRolesAtBase)
			Get
				Return Me._CsCorpRolesAtBase
			End Get
			Set
				Me._CsCorpRolesAtBase.Assign(value)
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpRolesAtHQ", Storage:="_CsCorpRolesAtHQ", ThisKey:="CharacterID", OtherKey:="CharacterID")>  _
		Public Property CsCorpRolesAtHQ() As EntitySet(Of CsCorpRolesAtHQ)
			Get
				Return Me._CsCorpRolesAtHQ
			End Get
			Set
				Me._CsCorpRolesAtHQ.Assign(value)
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpRolesAtOther", Storage:="_CsCorpRolesAtOther", ThisKey:="CharacterID", OtherKey:="CharacterID")>  _
		Public Property CsCorpRolesAtOther() As EntitySet(Of CsCorpRolesAtOther)
			Get
				Return Me._CsCorpRolesAtOther
			End Get
			Set
				Me._CsCorpRolesAtOther.Assign(value)
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpTitles", Storage:="_CsCorpTitles", ThisKey:="CharacterID", OtherKey:="CharacterID")>  _
		Public Property CsCorpTitles() As EntitySet(Of CsCorpTitles)
			Get
				Return Me._CsCorpTitles
			End Get
			Set
				Me._CsCorpTitles.Assign(value)
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsSkills", Storage:="_CsSkills", ThisKey:="CharacterID", OtherKey:="CharacterID")>  _
		Public Property CsSkills() As EntitySet(Of CsSkills)
			Get
				Return Me._CsSkills
			End Get
			Set
				Me._CsSkills.Assign(value)
			End Set
		End Property
		
		<Association(Name:="Characters_CharacterSheet", Storage:="_Characters", ThisKey:="CharacterID", OtherKey:="CharacterID", IsForeignKey:=true, DeleteOnNull:=true)>  _
		Public Property Characters() As Characters
			Get
				Return Me._Characters.Entity
			End Get
			Set
				Dim previousValue As Characters = Me._Characters.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Characters.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Characters.Entity = Nothing
						previousValue.CharacterSheet = Nothing
					End If
					Me._Characters.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CharacterSheet = Me
						Me._CharacterID = value.CharacterID
					Else
						Me._CharacterID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Characters")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_CsCertificates(ByVal entity As CsCertificates)
			Me.SendPropertyChanging
			entity.CharacterSheet = Me
		End Sub
		
		Private Sub detach_CsCertificates(ByVal entity As CsCertificates)
			Me.SendPropertyChanging
			entity.CharacterSheet = Nothing
		End Sub
		
		Private Sub attach_CsCorpRoles(ByVal entity As CsCorpRoles)
			Me.SendPropertyChanging
			entity.CharacterSheet = Me
		End Sub
		
		Private Sub detach_CsCorpRoles(ByVal entity As CsCorpRoles)
			Me.SendPropertyChanging
			entity.CharacterSheet = Nothing
		End Sub
		
		Private Sub attach_CsCorpRolesAtBase(ByVal entity As CsCorpRolesAtBase)
			Me.SendPropertyChanging
			entity.CharacterSheet = Me
		End Sub
		
		Private Sub detach_CsCorpRolesAtBase(ByVal entity As CsCorpRolesAtBase)
			Me.SendPropertyChanging
			entity.CharacterSheet = Nothing
		End Sub
		
		Private Sub attach_CsCorpRolesAtHQ(ByVal entity As CsCorpRolesAtHQ)
			Me.SendPropertyChanging
			entity.CharacterSheet = Me
		End Sub
		
		Private Sub detach_CsCorpRolesAtHQ(ByVal entity As CsCorpRolesAtHQ)
			Me.SendPropertyChanging
			entity.CharacterSheet = Nothing
		End Sub
		
		Private Sub attach_CsCorpRolesAtOther(ByVal entity As CsCorpRolesAtOther)
			Me.SendPropertyChanging
			entity.CharacterSheet = Me
		End Sub
		
		Private Sub detach_CsCorpRolesAtOther(ByVal entity As CsCorpRolesAtOther)
			Me.SendPropertyChanging
			entity.CharacterSheet = Nothing
		End Sub
		
		Private Sub attach_CsCorpTitles(ByVal entity As CsCorpTitles)
			Me.SendPropertyChanging
			entity.CharacterSheet = Me
		End Sub
		
		Private Sub detach_CsCorpTitles(ByVal entity As CsCorpTitles)
			Me.SendPropertyChanging
			entity.CharacterSheet = Nothing
		End Sub
		
		Private Sub attach_CsSkills(ByVal entity As CsSkills)
			Me.SendPropertyChanging
			entity.CharacterSheet = Me
		End Sub
		
		Private Sub detach_CsSkills(ByVal entity As CsSkills)
			Me.SendPropertyChanging
			entity.CharacterSheet = Nothing
		End Sub
	End Class
	
	<Table(Name:="csCertificates")>  _
	Partial Public Class CsCertificates
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Long
		
		Private _CharacterID As String
		
		Private _CertificateID As Integer
		
		Private _CharacterSheet As EntityRef(Of CharacterSheet)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCharacterIDChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterIDChanged()
    End Sub
    Partial Private Sub OnCertificateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCertificateIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CharacterSheet = CType(Nothing, EntityRef(Of CharacterSheet))
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Long
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="characterID", Storage:="_CharacterID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CharacterID() As String
			Get
				Return Me._CharacterID
			End Get
			Set
				If (String.Equals(Me._CharacterID, value) = false) Then
					Me.OnCharacterIDChanging(value)
					Me.SendPropertyChanging
					Me._CharacterID = value
					Me.SendPropertyChanged("CharacterID")
					Me.OnCharacterIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="certificateID", Storage:="_CertificateID", DbType:="Int NOT NULL")>  _
		Public Property CertificateID() As Integer
			Get
				Return Me._CertificateID
			End Get
			Set
				If ((Me._CertificateID = value)  _
							= false) Then
					Me.OnCertificateIDChanging(value)
					Me.SendPropertyChanging
					Me._CertificateID = value
					Me.SendPropertyChanged("CertificateID")
					Me.OnCertificateIDChanged
				End If
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCertificates", Storage:="_CharacterSheet", ThisKey:="CharacterID", OtherKey:="CharacterID", IsForeignKey:=true, DeleteOnNull:=true)>  _
		Public Property CharacterSheet() As CharacterSheet
			Get
				Return Me._CharacterSheet.Entity
			End Get
			Set
				Dim previousValue As CharacterSheet = Me._CharacterSheet.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CharacterSheet.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CharacterSheet.Entity = Nothing
						previousValue.CsCertificates.Remove(Me)
					End If
					Me._CharacterSheet.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CsCertificates.Add(Me)
						Me._CharacterID = value.CharacterID
					Else
						Me._CharacterID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("CharacterSheet")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="csCorpRoles")>  _
	Partial Public Class CsCorpRoles
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Long
		
		Private _CharacterID As String
		
		Private _RoleID As Integer
		
		Private _RoleName As String
		
		Private _CharacterSheet As EntityRef(Of CharacterSheet)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCharacterIDChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CharacterSheet = CType(Nothing, EntityRef(Of CharacterSheet))
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Long
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="characterID", Storage:="_CharacterID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CharacterID() As String
			Get
				Return Me._CharacterID
			End Get
			Set
				If (String.Equals(Me._CharacterID, value) = false) Then
					Me.OnCharacterIDChanging(value)
					Me.SendPropertyChanging
					Me._CharacterID = value
					Me.SendPropertyChanged("CharacterID")
					Me.OnCharacterIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="roleID", Storage:="_RoleID", DbType:="Int NOT NULL")>  _
		Public Property RoleID() As Integer
			Get
				Return Me._RoleID
			End Get
			Set
				If ((Me._RoleID = value)  _
							= false) Then
					Me.OnRoleIDChanging(value)
					Me.SendPropertyChanging
					Me._RoleID = value
					Me.SendPropertyChanged("RoleID")
					Me.OnRoleIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="roleName", Storage:="_RoleName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property RoleName() As String
			Get
				Return Me._RoleName
			End Get
			Set
				If (String.Equals(Me._RoleName, value) = false) Then
					Me.OnRoleNameChanging(value)
					Me.SendPropertyChanging
					Me._RoleName = value
					Me.SendPropertyChanged("RoleName")
					Me.OnRoleNameChanged
				End If
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpRoles", Storage:="_CharacterSheet", ThisKey:="CharacterID", OtherKey:="CharacterID", IsForeignKey:=true, DeleteOnNull:=true)>  _
		Public Property CharacterSheet() As CharacterSheet
			Get
				Return Me._CharacterSheet.Entity
			End Get
			Set
				Dim previousValue As CharacterSheet = Me._CharacterSheet.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CharacterSheet.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CharacterSheet.Entity = Nothing
						previousValue.CsCorpRoles.Remove(Me)
					End If
					Me._CharacterSheet.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CsCorpRoles.Add(Me)
						Me._CharacterID = value.CharacterID
					Else
						Me._CharacterID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("CharacterSheet")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="csCorpRolesAtBase")>  _
	Partial Public Class CsCorpRolesAtBase
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Long
		
		Private _CharacterID As String
		
		Private _RoleID As Integer
		
		Private _RoleName As String
		
		Private _CharacterSheet As EntityRef(Of CharacterSheet)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCharacterIDChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CharacterSheet = CType(Nothing, EntityRef(Of CharacterSheet))
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Long
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="characterID", Storage:="_CharacterID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CharacterID() As String
			Get
				Return Me._CharacterID
			End Get
			Set
				If (String.Equals(Me._CharacterID, value) = false) Then
					Me.OnCharacterIDChanging(value)
					Me.SendPropertyChanging
					Me._CharacterID = value
					Me.SendPropertyChanged("CharacterID")
					Me.OnCharacterIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="roleID", Storage:="_RoleID", DbType:="Int NOT NULL")>  _
		Public Property RoleID() As Integer
			Get
				Return Me._RoleID
			End Get
			Set
				If ((Me._RoleID = value)  _
							= false) Then
					Me.OnRoleIDChanging(value)
					Me.SendPropertyChanging
					Me._RoleID = value
					Me.SendPropertyChanged("RoleID")
					Me.OnRoleIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="roleName", Storage:="_RoleName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property RoleName() As String
			Get
				Return Me._RoleName
			End Get
			Set
				If (String.Equals(Me._RoleName, value) = false) Then
					Me.OnRoleNameChanging(value)
					Me.SendPropertyChanging
					Me._RoleName = value
					Me.SendPropertyChanged("RoleName")
					Me.OnRoleNameChanged
				End If
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpRolesAtBase", Storage:="_CharacterSheet", ThisKey:="CharacterID", OtherKey:="CharacterID", IsForeignKey:=true, DeleteOnNull:=true)>  _
		Public Property CharacterSheet() As CharacterSheet
			Get
				Return Me._CharacterSheet.Entity
			End Get
			Set
				Dim previousValue As CharacterSheet = Me._CharacterSheet.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CharacterSheet.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CharacterSheet.Entity = Nothing
						previousValue.CsCorpRolesAtBase.Remove(Me)
					End If
					Me._CharacterSheet.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CsCorpRolesAtBase.Add(Me)
						Me._CharacterID = value.CharacterID
					Else
						Me._CharacterID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("CharacterSheet")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="csCorpRolesAtHQ")>  _
	Partial Public Class CsCorpRolesAtHQ
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Long
		
		Private _CharacterID As String
		
		Private _RoleID As Integer
		
		Private _RoleName As String
		
		Private _CharacterSheet As EntityRef(Of CharacterSheet)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCharacterIDChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CharacterSheet = CType(Nothing, EntityRef(Of CharacterSheet))
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Long
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="characterID", Storage:="_CharacterID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CharacterID() As String
			Get
				Return Me._CharacterID
			End Get
			Set
				If (String.Equals(Me._CharacterID, value) = false) Then
					Me.OnCharacterIDChanging(value)
					Me.SendPropertyChanging
					Me._CharacterID = value
					Me.SendPropertyChanged("CharacterID")
					Me.OnCharacterIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="roleID", Storage:="_RoleID", DbType:="Int NOT NULL")>  _
		Public Property RoleID() As Integer
			Get
				Return Me._RoleID
			End Get
			Set
				If ((Me._RoleID = value)  _
							= false) Then
					Me.OnRoleIDChanging(value)
					Me.SendPropertyChanging
					Me._RoleID = value
					Me.SendPropertyChanged("RoleID")
					Me.OnRoleIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="roleName", Storage:="_RoleName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property RoleName() As String
			Get
				Return Me._RoleName
			End Get
			Set
				If (String.Equals(Me._RoleName, value) = false) Then
					Me.OnRoleNameChanging(value)
					Me.SendPropertyChanging
					Me._RoleName = value
					Me.SendPropertyChanged("RoleName")
					Me.OnRoleNameChanged
				End If
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpRolesAtHQ", Storage:="_CharacterSheet", ThisKey:="CharacterID", OtherKey:="CharacterID", IsForeignKey:=true, DeleteOnNull:=true)>  _
		Public Property CharacterSheet() As CharacterSheet
			Get
				Return Me._CharacterSheet.Entity
			End Get
			Set
				Dim previousValue As CharacterSheet = Me._CharacterSheet.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CharacterSheet.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CharacterSheet.Entity = Nothing
						previousValue.CsCorpRolesAtHQ.Remove(Me)
					End If
					Me._CharacterSheet.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CsCorpRolesAtHQ.Add(Me)
						Me._CharacterID = value.CharacterID
					Else
						Me._CharacterID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("CharacterSheet")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="csCorpRolesAtOther")>  _
	Partial Public Class CsCorpRolesAtOther
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Long
		
		Private _CharacterID As String
		
		Private _RoleID As Integer
		
		Private _RoleName As String
		
		Private _CharacterSheet As EntityRef(Of CharacterSheet)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCharacterIDChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterIDChanged()
    End Sub
    Partial Private Sub OnRoleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRoleIDChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CharacterSheet = CType(Nothing, EntityRef(Of CharacterSheet))
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Long
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="characterID", Storage:="_CharacterID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CharacterID() As String
			Get
				Return Me._CharacterID
			End Get
			Set
				If (String.Equals(Me._CharacterID, value) = false) Then
					Me.OnCharacterIDChanging(value)
					Me.SendPropertyChanging
					Me._CharacterID = value
					Me.SendPropertyChanged("CharacterID")
					Me.OnCharacterIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="roleID", Storage:="_RoleID", DbType:="Int NOT NULL")>  _
		Public Property RoleID() As Integer
			Get
				Return Me._RoleID
			End Get
			Set
				If ((Me._RoleID = value)  _
							= false) Then
					Me.OnRoleIDChanging(value)
					Me.SendPropertyChanging
					Me._RoleID = value
					Me.SendPropertyChanged("RoleID")
					Me.OnRoleIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="roleName", Storage:="_RoleName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property RoleName() As String
			Get
				Return Me._RoleName
			End Get
			Set
				If (String.Equals(Me._RoleName, value) = false) Then
					Me.OnRoleNameChanging(value)
					Me.SendPropertyChanging
					Me._RoleName = value
					Me.SendPropertyChanged("RoleName")
					Me.OnRoleNameChanged
				End If
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpRolesAtOther", Storage:="_CharacterSheet", ThisKey:="CharacterID", OtherKey:="CharacterID", IsForeignKey:=true, DeleteOnNull:=true)>  _
		Public Property CharacterSheet() As CharacterSheet
			Get
				Return Me._CharacterSheet.Entity
			End Get
			Set
				Dim previousValue As CharacterSheet = Me._CharacterSheet.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CharacterSheet.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CharacterSheet.Entity = Nothing
						previousValue.CsCorpRolesAtOther.Remove(Me)
					End If
					Me._CharacterSheet.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CsCorpRolesAtOther.Add(Me)
						Me._CharacterID = value.CharacterID
					Else
						Me._CharacterID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("CharacterSheet")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="csCorpTitles")>  _
	Partial Public Class CsCorpTitles
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Long
		
		Private _CharacterID As String
		
		Private _TitleID As Integer
		
		Private _TitleName As String
		
		Private _CharacterSheet As EntityRef(Of CharacterSheet)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCharacterIDChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterIDChanged()
    End Sub
    Partial Private Sub OnTitleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTitleIDChanged()
    End Sub
    Partial Private Sub OnTitleNameChanging(value As String)
    End Sub
    Partial Private Sub OnTitleNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CharacterSheet = CType(Nothing, EntityRef(Of CharacterSheet))
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Long
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="characterID", Storage:="_CharacterID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CharacterID() As String
			Get
				Return Me._CharacterID
			End Get
			Set
				If (String.Equals(Me._CharacterID, value) = false) Then
					Me.OnCharacterIDChanging(value)
					Me.SendPropertyChanging
					Me._CharacterID = value
					Me.SendPropertyChanged("CharacterID")
					Me.OnCharacterIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="titleID", Storage:="_TitleID", DbType:="Int NOT NULL")>  _
		Public Property TitleID() As Integer
			Get
				Return Me._TitleID
			End Get
			Set
				If ((Me._TitleID = value)  _
							= false) Then
					Me.OnTitleIDChanging(value)
					Me.SendPropertyChanging
					Me._TitleID = value
					Me.SendPropertyChanged("TitleID")
					Me.OnTitleIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="titleName", Storage:="_TitleName", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property TitleName() As String
			Get
				Return Me._TitleName
			End Get
			Set
				If (String.Equals(Me._TitleName, value) = false) Then
					Me.OnTitleNameChanging(value)
					Me.SendPropertyChanging
					Me._TitleName = value
					Me.SendPropertyChanged("TitleName")
					Me.OnTitleNameChanged
				End If
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsCorpTitles", Storage:="_CharacterSheet", ThisKey:="CharacterID", OtherKey:="CharacterID", IsForeignKey:=true, DeleteOnNull:=true)>  _
		Public Property CharacterSheet() As CharacterSheet
			Get
				Return Me._CharacterSheet.Entity
			End Get
			Set
				Dim previousValue As CharacterSheet = Me._CharacterSheet.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CharacterSheet.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CharacterSheet.Entity = Nothing
						previousValue.CsCorpTitles.Remove(Me)
					End If
					Me._CharacterSheet.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CsCorpTitles.Add(Me)
						Me._CharacterID = value.CharacterID
					Else
						Me._CharacterID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("CharacterSheet")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="csSkills")>  _
	Partial Public Class CsSkills
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Long
		
		Private _CharacterID As String
		
		Private _TypeID As Long
		
		Private _Skillpoints As Long
		
		Private _Level As Short
		
		Private _Unpublished As System.Nullable(Of Boolean)
		
		Private _CharacterSheet As EntityRef(Of CharacterSheet)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCharacterIDChanging(value As String)
    End Sub
    Partial Private Sub OnCharacterIDChanged()
    End Sub
    Partial Private Sub OnTypeIDChanging(value As Long)
    End Sub
    Partial Private Sub OnTypeIDChanged()
    End Sub
    Partial Private Sub OnSkillpointsChanging(value As Long)
    End Sub
    Partial Private Sub OnSkillpointsChanged()
    End Sub
    Partial Private Sub OnLevelChanging(value As Short)
    End Sub
    Partial Private Sub OnLevelChanged()
    End Sub
    Partial Private Sub OnUnpublishedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnUnpublishedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CharacterSheet = CType(Nothing, EntityRef(Of CharacterSheet))
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Long
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="characterID", Storage:="_CharacterID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
		Public Property CharacterID() As String
			Get
				Return Me._CharacterID
			End Get
			Set
				If (String.Equals(Me._CharacterID, value) = false) Then
					Me.OnCharacterIDChanging(value)
					Me.SendPropertyChanging
					Me._CharacterID = value
					Me.SendPropertyChanged("CharacterID")
					Me.OnCharacterIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="typeID", Storage:="_TypeID", DbType:="BigInt NOT NULL")>  _
		Public Property TypeID() As Long
			Get
				Return Me._TypeID
			End Get
			Set
				If ((Me._TypeID = value)  _
							= false) Then
					Me.OnTypeIDChanging(value)
					Me.SendPropertyChanging
					Me._TypeID = value
					Me.SendPropertyChanged("TypeID")
					Me.OnTypeIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="skillpoints", Storage:="_Skillpoints", DbType:="BigInt NOT NULL")>  _
		Public Property Skillpoints() As Long
			Get
				Return Me._Skillpoints
			End Get
			Set
				If ((Me._Skillpoints = value)  _
							= false) Then
					Me.OnSkillpointsChanging(value)
					Me.SendPropertyChanging
					Me._Skillpoints = value
					Me.SendPropertyChanged("Skillpoints")
					Me.OnSkillpointsChanged
				End If
			End Set
		End Property
		
		<Column(Name:="level", Storage:="_Level", DbType:="SmallInt NOT NULL")>  _
		Public Property Level() As Short
			Get
				Return Me._Level
			End Get
			Set
				If ((Me._Level = value)  _
							= false) Then
					Me.OnLevelChanging(value)
					Me.SendPropertyChanging
					Me._Level = value
					Me.SendPropertyChanged("Level")
					Me.OnLevelChanged
				End If
			End Set
		End Property
		
		<Column(Name:="unpublished", Storage:="_Unpublished", DbType:="Bit")>  _
		Public Property Unpublished() As System.Nullable(Of Boolean)
			Get
				Return Me._Unpublished
			End Get
			Set
				If (Me._Unpublished.Equals(value) = false) Then
					Me.OnUnpublishedChanging(value)
					Me.SendPropertyChanging
					Me._Unpublished = value
					Me.SendPropertyChanged("Unpublished")
					Me.OnUnpublishedChanged
				End If
			End Set
		End Property
		
		<Association(Name:="CharacterSheet_CsSkills", Storage:="_CharacterSheet", ThisKey:="CharacterID", OtherKey:="CharacterID", IsForeignKey:=true, DeleteOnNull:=true)>  _
		Public Property CharacterSheet() As CharacterSheet
			Get
				Return Me._CharacterSheet.Entity
			End Get
			Set
				Dim previousValue As CharacterSheet = Me._CharacterSheet.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CharacterSheet.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CharacterSheet.Entity = Nothing
						previousValue.CsSkills.Remove(Me)
					End If
					Me._CharacterSheet.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CsSkills.Add(Me)
						Me._CharacterID = value.CharacterID
					Else
						Me._CharacterID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("CharacterSheet")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table()>  _
	Partial Public Class UserInfo
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UserID As String
		
		Private _ApiKey As String
		
		Private _FullKey As Boolean
		
		Private _Characters As EntitySet(Of Characters)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIDChanging(value As String)
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnApiKeyChanging(value As String)
    End Sub
    Partial Private Sub OnApiKeyChanged()
    End Sub
    Partial Private Sub OnFullKeyChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFullKeyChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Characters = New EntitySet(Of Characters)(AddressOf Me.attach_Characters, AddressOf Me.detach_Characters)
			OnCreated
		End Sub
		
		<Column(Name:="userID", Storage:="_UserID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property UserID() As String
			Get
				Return Me._UserID
			End Get
			Set
				If (String.Equals(Me._UserID, value) = false) Then
					Me.OnUserIDChanging(value)
					Me.SendPropertyChanging
					Me._UserID = value
					Me.SendPropertyChanged("UserID")
					Me.OnUserIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="apiKey", Storage:="_ApiKey", DbType:="NVarChar(64) NOT NULL", CanBeNull:=false)>  _
		Public Property ApiKey() As String
			Get
				Return Me._ApiKey
			End Get
			Set
				If (String.Equals(Me._ApiKey, value) = false) Then
					Me.OnApiKeyChanging(value)
					Me.SendPropertyChanging
					Me._ApiKey = value
					Me.SendPropertyChanged("ApiKey")
					Me.OnApiKeyChanged
				End If
			End Set
		End Property
		
		<Column(Name:="fullKey", Storage:="_FullKey", DbType:="Bit NOT NULL")>  _
		Public Property FullKey() As Boolean
			Get
				Return Me._FullKey
			End Get
			Set
				If ((Me._FullKey = value)  _
							= false) Then
					Me.OnFullKeyChanging(value)
					Me.SendPropertyChanging
					Me._FullKey = value
					Me.SendPropertyChanged("FullKey")
					Me.OnFullKeyChanged
				End If
			End Set
		End Property
		
		<Association(Name:="UserInfo_Characters", Storage:="_Characters", ThisKey:="UserID", OtherKey:="UserID")>  _
		Public Property Characters() As EntitySet(Of Characters)
			Get
				Return Me._Characters
			End Get
			Set
				Me._Characters.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Characters(ByVal entity As Characters)
			Me.SendPropertyChanging
			entity.UserInfo = Me
		End Sub
		
		Private Sub detach_Characters(ByVal entity As Characters)
			Me.SendPropertyChanging
			entity.UserInfo = Nothing
		End Sub
	End Class
End Namespace
